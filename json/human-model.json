{
  "source": "human-model",
  "version": "",
  "modules": [
    {
      "textRaw": "human-model",
      "name": "human-model",
      "desc": "<p>HumanModel helps you create observable models for your apps. Most commonly in clientside frameworks, your models are what hold data fetched from your API. But really, it&apos;s all about having a way to separate concerns. Your models should be your authoritive &quot;source of truth&quot; when it comes to all state held in your application.\n\n</p>\n<p>Backbone provides observable models, but Human Model takes this a step further by forcing you to explicitly define what the model is going to store so that the model code can end up being self-documenting in that you can now simply look at the model code and see what they&apos;re expected to store.\n\n</p>\n<p>This is hugely important for enabling teams to work on the same app together. There&apos;s also a few extra goodies, like direct accessors (not having to use <code>.set()</code> and <code>.get()</code>), and intelligently evented dervied properties.\n\n</p>\n",
      "modules": [
        {
          "textRaw": "Installing",
          "name": "installing",
          "desc": "<p>via npm:\n\n</p>\n<pre><code>npm install human-model</code></pre>\n<p>via bower: \n\n</p>\n<pre><code>bower install human-model</code></pre>\n",
          "type": "module",
          "displayName": "Installing"
        },
        {
          "textRaw": "Module sytems/loaders/managers",
          "name": "module_sytems/loaders/managers",
          "desc": "<p>Thanks to @svnlto, HumanModel uses UMD so it works as CommonJS (node + browserify), AMD, and as a standalone script tag.\n\n</p>\n",
          "type": "module",
          "displayName": "Module sytems/loaders/managers"
        },
        {
          "textRaw": "Types of state",
          "name": "types_of_state",
          "desc": "<p>Take for instance a <code>selected</code> property on a model. That&apos;s likely something you would use to represent current UI state for the current browser session but not something you&apos;d want to save back to the API when calling a model&apos;s .save() method. So there really are two types of state. It&apos;s challenging to make that type of distinction with Backbone.\n\n</p>\n<p>HumanModel supports three types of state that will get stored on a model: \n\n</p>\n<ul>\n<li><strong>properties</strong>: State that comes from (and will be sent back to) our API and represents the data persisted on the server.</li>\n<li><strong>session properties</strong>: State that represents current browser session state. </li>\n<li><strong>derived properties</strong>: These are read-only psuedo properties that are usually derived from properties or session properties. These are generally created for convenince or as a means to let you cache a computed result (read more below).</li>\n</ul>\n<p>In human model you have to classify all your properties as either <code>prop</code> or a <code>session</code>. That includes declaring your <code>id</code> property. How HumanModel handles properties that you have not pre-defined is determined by its <code>extraProperties</code> setting. But, by default properties that are <code>.set()</code> on a model that you have not defined are simply ignored.\n\n</p>\n<p>In human model you have to classify all your properties as either prop or a session. That includes declaring your id property. How HumanModel handles properties that you have not pre-defined is determined by its extraProperties setting. But, by default properties that are <code>.set()</code> on a model that you have not defined are simply ignored.\n\n</p>\n",
          "type": "module",
          "displayName": "Types of state"
        },
        {
          "textRaw": "Handling model relationships",
          "name": "handling_model_relationships",
          "desc": "<p>From our experience, derived properties work really well for handling relationships between models. Let&apos;s say you&apos;ve got a model representing people and model representing a group of people. Often your API for fetching people would include something like a groupID as a property for each person you retrieve.\n\n\n</p>\n",
          "type": "module",
          "displayName": "Handling model relationships"
        },
        {
          "textRaw": "Why do this?",
          "name": "why_do_this?",
          "desc": "<p>Backbone models have a lot of flexibility in that you don&apos;t have to define what you&apos;re wanting to store ahead of time. \n\n</p>\n<p>The only challenge with that is that for more complex applications is actually becomes quite difficult to remember what properties are available to you.\n\n</p>\n<p>Using human models means they&apos;re much more self-documenting and help catch bugs. Someone new to the project can read the models and have a pretty good idea of how the app is put together.\n\n</p>\n<p>It also uses&apos;s ES5&apos;s fancy <code>Object.defineProperty</code> to treat model attributes as if they were properties.\n\n</p>\n<p>That means with Human Model you can set an attribute like this: <code>user.name = &apos;henrik&apos;</code> and still get a <code>change:name</code> event fired. \n\n</p>\n<p>Obviously, this restriction also means that this won&apos;t work in browsers that don&apos;t support that. You can check specific browser support here: <a href=\"http://kangax.github.io/es5-compat-table/\">http://kangax.github.io/es5-compat-table/</a>\n\n</p>\n",
          "type": "module",
          "displayName": "Why do this?"
        },
        {
          "textRaw": "Key Differences from Backbone",
          "name": "key_differences_from_backbone",
          "desc": "<p>Everything Backbone does with Collections should Just Workâ„¢ with HumanModel as long as you specify a HumanModel constructor as a collection&apos;s <code>model</code> property.\n\n</p>\n<p><strong>important</strong>: One key point to understand is that unlike backbone. You&apos;re actually passing an object definition that describes the Model, not just methods to attach to its prototype. For example, you&apos;ll notice we call <code>HumanModel.define()</code> instead of <code>Backbone.Model.extend()</code>. This is to make the distinction clear.\n\n</p>\n<p>Besides that and the obvious differences, any behavior that doesn&apos;t match Backbone should be considered a bug.\n\n\n</p>\n",
          "type": "module",
          "displayName": "Key Differences from Backbone"
        },
        {
          "textRaw": "Explicit model definitions",
          "name": "explicit_model_definitions",
          "desc": "<p>Schema definitions take an attribute called <code>props</code> to defined properties.\n\n</p>\n<p>Property names can be defined two different ways, either an array with <code>[type, required, default]</code>,\nor an object: <code>{ type: &apos;string&apos;, required: true, default: &apos;&apos; , allowNull: false}</code>\n\n</p>\n<p>types can be: <code>string</code>, <code>number</code>, <code>boolean</code>, <code>array</code>, <code>object</code>, or <code>date</code>\nrequired: true, false (optional)\ndefault: any (optional)\nsetOnce: true, false (optional)\ntest: function (optional)\nallowNull: true, false (optional)\nvalues: <code>[&apos;some&apos;, &apos;valid&apos;, &apos;values&apos;]</code>(optional) \n\n</p>\n<p>Note that when defining with an array <code>type</code>, <code>required</code>, and <code>default</code>\nare the only property attributes you can set.\n\n</p>\n<p>If <code>required</code> is true, the attribute will always have a value even if it is not explicitly set or is cleared.  If a default is given, that will be used.  If no default is given a default for its data type will be used (e.g. &apos;&apos; for string, {} for object)\n\n</p>\n<p>If a <code>default</code> is given, the attribute will default to that value when the model is instantiated.\n\n</p>\n<p>If <code>setOnce</code> is true, the attribute will throw an error if anything tries to set its value more than once.\n\n</p>\n<p>If <code>values</code> is provided, you can only set that property to a value in the list. You can use this in combination with <code>type</code> to check both, or just use <code>values</code> and <code>default</code> by themselves. This is handy for <code>enum</code>-type stuff. For example:\n\n</p>\n<pre><code class=\"js\">props: {\n    alignment: {\n        values: [&apos;top&apos;, &apos;middle&apos;, &apos;bottom&apos;],\n        default: &apos;middle&apos;\n    }\n}</code></pre>\n<p>If given, <code>test</code> should be a function that expects the new value (and optionally the new type) of the attribute.  It should return an error message on failure, and false on success\n\n</p>\n<pre><code class=\"js\">props: {\n    firstName: [&apos;string&apos;, true, &apos;Jim&apos;]\n    lastName: {\n        type: &apos;string&apos;, \n        required: false, \n        default: &apos;Bob&apos; \n    }\n}</code></pre>\n",
          "type": "module",
          "displayName": "Explicit model definitions"
        },
        {
          "textRaw": "A sample model with comments",
          "name": "a_sample_model_with_comments",
          "desc": "<pre><code class=\"js\">var Person = HumanModel.define({\n    // every human model should have a type\n    type: &apos;member&apos;,\n    initialize: function () {\n        // main initialization function\n    },\n    // props are for properties that exist on the server\n    props: {\n        id: {\n            type: &apos;number&apos;,\n            setOnce: true\n        },\n        firstName: [&apos;string&apos;, true],\n        lastName: [&apos;string&apos;, true],\n        created: [&apos;date&apos;],\n        email: [&apos;string&apos;, true],\n        username: [&apos;string&apos;, true],\n        lastLogin: [&apos;date&apos;],\n        largePicUrl: [&apos;string&apos;],\n        department: {\n            type: &apos;number&apos;,\n            // you can optionally provide your own test function\n            test: function (val) {\n                if (val &gt; 20) {\n                    return &quot;Invalid department&quot;;\n                }\n            }\n        },\n        alignment: {\n            // you can also specify a list of valid values\n            values: [&apos;top&apos;, &apos;middle&apos;, &apos;bottom&apos;],\n            default: &apos;middle&apos;\n        }\n    },\n    // derived properties and their dependencies. If any dependency changes\n    // that will also trigger a &apos;change&apos; event on the derived property so\n    // we know to re-render the template\n    derived: {\n        // fullName is \n        fullName: {\n            // you can optionally define the properties this derived property\n            // depends on. That way if the underlying properties change you can\n            // listen for changes directly on the derived property.\n            deps: [&apos;firstName&apos;, &apos;lastName&apos;],\n            fn: function () {\n                return this.firstName + &apos; &apos; + this.lastName;\n            }\n        }\n    },\n    // Session properties are browser state for a model\n    // these trigger &apos;change&apos; events when set, but are not\n    // included when serializing or saving to server.\n    session: {\n        selectedTasks: [&apos;array&apos;, true, []],\n        lastPage: [&apos;string&apos;, true, &apos;tasks&apos;],\n        unread: [&apos;boolean&apos;, true, false],\n        active: [&apos;boolean&apos;, true, false]\n    },\n    // child collections that will be initted. They will\n    // be created at as a property of the same name as the\n    // key. The child collection will also be given a reference\n    // to its parent.\n    collections: {\n        messages: Messages\n    },\n    otherMethods: function (cb) {\n        // of course you can tack on whatever other methods you want\n    }\n});</code></pre>\n",
          "type": "module",
          "displayName": "A sample model with comments"
        },
        {
          "textRaw": "Going hardcore \"strict\" definition",
          "name": "going_hardcore_\"strict\"_definition",
          "desc": "<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\">Strict mode</a> in JS is pretty great and is fairly well supported in modern browsers.\n\n</p>\n<p>If you want to be <em>really</em> hardcore about not letting you set properties that aren&apos;t defined, you can specify <code>seal: true</code> when defining your model.\n\n</p>\n<pre><code class=\"js\">// enable strict mode\n&quot;use strict&quot;;\n\nvar MySuperStrictModel = HumanModel.define({\n    // set this to true\n    seal: true,\n    // also throw errors for properties not defined\n    // when set via `set`.\n    extraProperties: &apos;reject&apos;,\n    // normal properties\n    props: {\n        name: &apos;string&apos;\n    }\n});\n\n// create an instance of this model\nvar model = new MySuperStrictModel();\n\n// setting defined properties works like usual\nmodel.name = &apos;something&apos;;\n\n// BUT, setting a property that doesn&apos;t exist\n// will throw an error because the object is sealed.\nmodel.something = &apos;something else&apos;; // KABOOM!</code></pre>\n",
          "type": "module",
          "displayName": "Going hardcore \"strict\" definition"
        },
        {
          "textRaw": "Setting model attributes",
          "name": "setting_model_attributes",
          "desc": "<pre><code class=\"js\">// backbone:\nuser.set(&apos;firstName&apos;, &apos;billy bob&apos;);\n\n// human:\nuser.firstName = &apos;billy bob&apos;;\n\n// p.s. you can still do it the other way in human (so you can still pass options)\nuser.set(&apos;firstName&apos;, &apos;billy bob&apos;, {silent: true})</code></pre>\n",
          "type": "module",
          "displayName": "Setting model attributes"
        },
        {
          "textRaw": "Getting model attributes",
          "name": "getting_model_attributes",
          "desc": "<pre><code class=\"js\">// backbone:\nuser.get(&apos;firstName&apos;);\n\n// human\nuser.firstName;</code></pre>\n",
          "type": "module",
          "displayName": "Getting model attributes"
        },
        {
          "textRaw": "Tests",
          "name": "tests",
          "desc": "<p>An extensive suite of tests can be run by opening <code>test/index.html</code> in a browser. In order to ensure compatibility with backbone to the extent possible I started with all the tests from Backbone 1.0.0 and modified them to use HumanModel.\n\n</p>\n",
          "type": "module",
          "displayName": "Tests"
        },
        {
          "textRaw": "Caveats",
          "name": "Caveats",
          "desc": "<p>HumanModel also inits a global registry for storing all initted models. It&apos;s designed to be used for looking up models based on their type, id and optional namespace.\n\n</p>\n<p>It&apos;s purpose is finding/updating models when we get updates pushed to us from the server. This is very important for buildling realtime apps.\n\n</p>\n<p>TODO: needs more docs on the registry.\n\n\n</p>\n",
          "type": "module",
          "displayName": "The Registry"
        },
        {
          "textRaw": "The Registry",
          "name": "the_registry",
          "desc": "<p>HumanModel also inits a global registry for storing all initted models. It&apos;s designed to be used for looking up models based on their type, id and optional namespace.\n\n</p>\n<p>It&apos;s purpose is finding/updating models when we get updates pushed to us from the server. This is very important for buildling realtime apps.\n\n</p>\n<p>TODO: needs more docs on the registry.\n\n\n</p>\n",
          "type": "module",
          "displayName": "The Registry"
        },
        {
          "textRaw": "Module: HumanModel",
          "name": "module:_humanmodel",
          "desc": "<p>The module exports the following functions and properties.\n\n</p>\n",
          "modules": [
            {
              "textRaw": ".define(modelDefinition)",
              "name": ".define(modeldefinition)",
              "desc": "<p><code>define</code> is the main method you&apos;ll use to create model definitions. It returns a custom constructor that can be used to create instances of your custom model.\n\n</p>\n<p>As an example imagine two modules <code>app.js</code> and <code>UserModel.js</code>.\n\n</p>\n<p>The contents of <code>UserModel.js</code> defines a model:\n\n</p>\n<pre><code class=\"js\">var HumanModel = require(&apos;human-model&apos;);\n\n// define a model\nvar UserModel = HumanModel.define({\n    props: {\n        name: &apos;string&apos;\n    }\n});\n\nvar user = new User({name: &apos;henrik&apos;});\n\nconsole.log(user.name); // logs out &apos;henrik&apos;</code></pre>\n",
              "type": "module",
              "displayName": ".define(modelDefinition)"
            },
            {
              "textRaw": ".registry",
              "name": ".registry",
              "desc": "<p>An instance of the global model registry.\n\n</p>\n",
              "type": "module",
              "displayName": ".registry"
            },
            {
              "textRaw": ".Registry",
              "name": ".registry",
              "desc": "<p>The Registry constructor is exported in case you want to define your own registry.\n\n</p>\n",
              "type": "module",
              "displayName": ".Registry"
            },
            {
              "textRaw": ".dataTypes",
              "name": ".datatypes",
              "desc": "<p>The dataTypes\n\n\n</p>\n",
              "type": "module",
              "displayName": ".dataTypes"
            }
          ],
          "type": "module",
          "displayName": "Module: HumanModel"
        },
        {
          "textRaw": "Authors",
          "name": "authors",
          "desc": "<p>Created by <a href=\"http://twitter.com/henrikjoreteg\">@HenrikJoreteg</a> with contributions from:\n\n</p>\n<ul>\n<li><a href=\"http://twitter.com/beausorensen\">@beausorensen</a></li>\n<li><a href=\"https://twitter.com/lancestout\">@LanceStout</a></li>\n<li><a href=\"https://twitter.com/philip_roberts\">@philip_roberts</a></li>\n<li><a href=\"https://twitter.com/svenlito\">@svenlito</a></li>\n</ul>\n",
          "type": "module",
          "displayName": "Authors"
        },
        {
          "textRaw": "Changelog",
          "name": "Changelog",
          "desc": "<p>MIT\n</p>\n",
          "type": "module",
          "displayName": "License"
        },
        {
          "textRaw": "License",
          "name": "license",
          "desc": "<p>MIT\n</p>\n",
          "type": "module",
          "displayName": "License"
        }
      ],
      "type": "module",
      "displayName": "human-model"
    }
  ]
}