{
  "source": "ampersand-registry",
  "version": "",
  "modules": [
    {
      "textRaw": "ampersand-registry",
      "name": "ampersand-registry",
      "desc": "<p>Global model registry for tracking instantiated models accross collections.\n\n</p>\n<p>This isn&apos;t necessary for most apps, but sometimes it&apos;s useful to create a global registry of all or a subset of instantiated models in your application. This can be useful when realtime applications where you&apos;re getting incoming events with IDs and model types and need some global way to look up models in your application.\n\n</p>\n<p>The code is quite short and simple it&apos;s only ~50 lines. It may be easiest to just read the code for documetation. But some examples/explanations are included below.\n\n\n\n</p>\n",
      "modules": [
        {
          "textRaw": "install",
          "name": "install",
          "desc": "<pre><code>npm install ampersand-registry</code></pre>\n",
          "type": "module",
          "displayName": "install"
        },
        {
          "textRaw": "browser support",
          "name": "browser_support",
          "desc": "<p><a href=\"https://ci.testling.com/AmpersandJS/ampersand-registry\"><img src=\"https://ci.testling.com/AmpersandJS/ampersand-registry.png\" alt=\"testling badge\"></a>\n\n</p>\n<h2>example</h2>\n<pre><code class=\"javascript\">var Registry = require(&apos;ampersand-registry&apos;);\nvar Model = require(&apos;ampersand-model&apos;);\n\n// a singleton model registry\nwindow.registry = new Registry();\n\n// then whenever we&apos;re defining models for our application\n// if we&apos;re using ampersand-model or it&apos;s lower level cousin\n// ampersand-state we can pass it the registry as part of the\n// definition.\n\nvar MyModel = Model.extend({\n    type: &apos;user&apos;,\n    props: {\n        name: &apos;string&apos;\n    },\n    // Pass the registry you want all the instances of this model\n    // to be included in.\n    registry: window.registry\n\n    // can also be a function in case it&apos;s not defined yet\n    registry: function () {\n        return window.registry;\n    } \n});</code></pre>\n<p>After doing this all instantiated models will be put into the registry based on their <code>type</code> property and be removed when destroyed.\n\n</p>\n<p>Then the registry can be used to look up models as follows:\n\n</p>\n<pre><code class=\"javascript\">// explicitly storing a model\n// (if you declare them in your models this isn&apos;t necessary) \n// this will use the models `type`, `getId`, and `namespace` \n// properties to store this accordingly.\nregistry.store(model);\n\n// get a model\nregistry.lookup(&apos;{{model type}}&apos;, &apos;{{ model id }}&apos;, &apos;{{ optional namespace }}&apos;);\n\n// remove a stored model from the store by type, id and optionally namespace\nregistry.remove(&apos;{{model type}}&apos;, &apos;{{ model id }}&apos;, &apos;{{ optional namespace }}&apos;);\n\n// de-reference all models\nregistry.clear();</code></pre>\n",
          "type": "module",
          "displayName": "browser support"
        }
      ],
      "type": "module",
      "displayName": "ampersand-registry"
    }
  ]
}